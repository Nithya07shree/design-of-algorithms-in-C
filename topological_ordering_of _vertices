#include<stdio.h>
#include<conio.h>
#define SIZE 30
int a[SIZE][SIZE], indegree[SIZE];
int n;
void find_indegree()
{
int i,j,sum;
for(i = 0 ; i < n ; i++) // Column sum gives the in-degree of vertex
{
sum = 0 ;
for(j = 0 ; j < n ; j++)
{
sum += a[j][i];
}
indegree[i] = sum;
}
}
void topological_sort()
{
int i,j,u,v,t[SIZE],s[SIZE],top,k;
find_indegree();
top = -1;
k = 0;
for(i = 0 ; i < n; i++) //push vertex with in-degree zero to stack
{
if(indegree[i] == 0)
{
s[++top] = i;
}
}
while(top >= 0) //Repeat until there is an empty in stack
{
u = s[top--];
t[k++] = u; //top of stack element is stored in temporary array
for(v = 0 ; v < n ; v++)
{
if(a[u][v] == 1)
{
indegree[v]--;
if(indegree[v] == 0)
{
s[++top] = v; //push adjacent vertex to stack
}
}
}
}
printf("The topological sequence is \n");
for(i = 0 ; i < n; i++)
{
printf("%d\t", t[i]);
}
}
void main()
{
int i,j;
int u,v;
clrscr();
printf("Enter the number of vertices: \n");
scanf("%d", &n);
printf("Enter the adjacency matrix: \n");
for (i = 0 ; i < n ; i++)
{
for (j = 0;j < n; j++)
{
scanf("%d", &a[i][j]);
}
}
topological_sort();
getch();
}
